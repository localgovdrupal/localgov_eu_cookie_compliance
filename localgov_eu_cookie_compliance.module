<?php

/**
 * @file
 * Module file for the Cookie settings block.
 *
 * Overrides the eu_cookie_compliance_popup_info theme using different theme
 * templates depending on which page we are.  The Cookie settings page, where
 * the Cookie settings block is embedded, gets a cookie popup template that
 * displays categories.  A different template is used for the remaining pages
 * and that template does not display categories.  This makes it possible to
 * manage the Cookie categories not from the EU Cookie popup but from our Cookie
 * settings block only.
 *
 * Turns off the Cookie popup while at the Cookie settings page.  On this page,
 * we have our Cookie settings *block*.  This makes the popup redundant.
 */

declare(strict_types = 1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element\PathElement;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 *
 * Provide two overrides for the default eu_cookie_compliance_popup_info theme
 * template.  One template is used for the Cookie settings block.  The other one
 * is used everywhere else.  The template for the Cookie settings block uses
 * radio boxes instead of checkboxes.
 *
 * Only declare these template overrides when a Cookies settings page path is
 * present in the site configuration.
 */
function localgov_eu_cookie_compliance_theme() {

  $cookie_settings_page_path = \Drupal::config('localgov_eu_cookie_compliance.settings')->get('cookie-settings-page-path') ?? '';
  $trimmed_cookie_settings_page_path = trim($cookie_settings_page_path, '/');

  if (empty($trimmed_cookie_settings_page_path)) {
    return [];
  }

  return [
    'eu_cookie_compliance_popup_info__cookie_settings_block' => [
      'base hook' => 'eu_cookie_compliance_popup_info',
      'template'  => 'eu-cookie-compliance-popup-info--cookie-settings-block',
    ],
    'eu_cookie_compliance_popup_info__override' => [
      'base hook' => 'eu_cookie_compliance_popup_info',
      'template'  => 'eu-cookie-compliance-popup-info--override',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 *
 * Override the **default** theme template for the
 * eu_cookie_compliance_popup_info theme in all pages except the Cookie settings
 * page.  On that page, we use a different theme template.
 */
function localgov_eu_cookie_compliance_theme_suggestions_eu_cookie_compliance_popup_info_alter(array &$suggestions, array $vars) {

  if (_localgov_eu_cookie_compliance_is_cookie_settings_page()) {
    $suggestions[] = 'eu_cookie_compliance_popup_info__cookie_settings_block';
  }
  else {
    $suggestions[] = 'eu_cookie_compliance_popup_info__override';
  }
}

/**
 * Implements hook_preprocess_hook() for hook_preprocess_eu_cookie_compliance_popup_info().
 *
 * Inserts the Cookie settings page's Url.  We link to this page from the theme
 * templates.  We need the Url object in the template.
 */
function localgov_eu_cookie_compliance_preprocess_eu_cookie_compliance_popup_info(array &$vars) {

  $cookie_settings_page_path = Drupal::config('localgov_eu_cookie_compliance.settings')->get('cookie-settings-page-path') ?? '#';

  $vars['cookie_settings_page_url'] = Url::fromUserInput($cookie_settings_page_path);
}

/**
 * Implements hook_eu_cookie_compliance_show_popup().
 *
 * Turns off the Cookie settings popup on the Cookie settings page.  On that
 * page, we already have the Cookie settings form within a block.  This makes
 * the popup redundant.
 */
function localgov_eu_cookie_compliance_eu_cookie_compliance_show_popup_alter(&$show_popup) {

  if (_localgov_eu_cookie_compliance_is_cookie_settings_page()) {
    $show_popup = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for hook_form_eu_cookie_compliance_config_form_alter().
 *
 * Alterations:
 * - Add the Cookie settings page path field and its submit handler.
 */
function localgov_eu_cookie_compliance_form_eu_cookie_compliance_config_form_alter(array &$form, FormStateInterface $form_state): void {

  $config = \Drupal::config('localgov_eu_cookie_compliance.settings');

  $form['consent_per_category']['cookie-settings-page-path'] = [
    '#type' => 'path',
    '#title' => t('Cookie settings page path'),
    '#description' => t('Path of the Cookie settings page of this site.  Where available, use the **Path alias** of the Cookie settings page.'),
    '#default_value' => $config->get('cookie-settings-page-path'),
    '#convert_path' => PathElement::CONVERT_NONE,
  ];


  $form['oembed'] = [
    '#type' => 'details',
    '#title' => t("Disable the following embed sources when consent isn't given"),
    '#open' => TRUE,
    '#states' => [
      'visible' => [
        "input[name='method']" => ['!value' => 'default'],
      ],
    ],
  ];

  $form['oembed']['disabled_oembeds'] = [
    '#type' => 'textarea',
    '#title' => t('Disable OEmbed sources'),
    '#default_value' => $config->get('disabled_oembeds'),
    '#description' => t("<span class='eu-cookie-compliance-word-break'>Include the domain to block embeds from, each on a separate line. When using the opt-in or opt-out consent options, you can block certain oembed sources from being loaded when consent isn't given.<br><br> When using the consent method 'Opt-in with categories', you can link the script to a specific category by using the format: 'google_cookies:youtu.be'"),
  ];



  $form['#submit'][] = '_localgov_eu_cookie_compliance_path_submit';
}


/**
 * Based on the implementation at https://git.drupalcode.org/project/cookies/-/blob/2.x/modules/cookies_video/cookies_video.module
 *
 * Implements hook_preprocess_HOOK().
 */
function localgov_eu_cookie_compliance_preprocess_field(&$variables) {
  $formatter = $variables["element"]["#formatter"];
  if ($formatter === 'oembed') {
    _cookies_video_media_oembed_handler($variables);
  }
}



/**
 * Implements hook_page_attachments_alter().
 */
function localgov_eu_cookie_compliance_page_attachments_alter(array &$attachment_list) {

  _localgov_eu_cookie_compliance_defer_tracker_scripts($attachment_list);
}

/**
 * Form submit handler.
 *
 * Save $form['consent_per_category']['cookie-settings-page-path'] as
 * localgov_eu_cookie_compliance.settings.cookie-settings-page-path config.
 */
function _localgov_eu_cookie_compliance_path_submit(array &$form, FormStateInterface $form_state) {

  $cookie_settings_page_path = $form_state->getValue('cookie-settings-page-path');
  $disabled_oembeds = $form_state->getValue('disabled_oembeds');
  $path_w_leading_slash = '/' . trim($cookie_settings_page_path, '/');

  $config_factory = \Drupal::service('config.factory');
  $config = $config_factory->getEditable('localgov_eu_cookie_compliance.settings');

  $config->set('cookie-settings-page-path', $path_w_leading_slash);
  $config->set('disabled_oembeds', $disabled_oembeds);
  $config->save();
}

/**
 * Are we on the cookie settings page?
 */
function _localgov_eu_cookie_compliance_is_cookie_settings_page(): bool {

  $is_cookie_settings_page = &drupal_static(__FUNCTION__);
  if (isset($is_cookie_settings_page)) {
    return $is_cookie_settings_page;
  }

  $cookie_settings_page_path = \Drupal::config('localgov_eu_cookie_compliance.settings')->get('cookie-settings-page-path');

  $current_path = \Drupal::service('path.current')->getPath();
  $current_path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

  $is_cookie_settings_page = ($current_path_alias === $cookie_settings_page_path);
  return $is_cookie_settings_page;
}

/**
 * Removes references to tracker scripts from the page header.
 *
 * The following scripts are removed here and then added later from Javascript:
 * - Google analytics: Added by the google_analytics contrib module.
 * - Hotjar: Added by the hotjar contrib module.
 *
 * @see google_analytics_page_attachments()
 * @see hotjar_page_attachments()
 * @see js/deferred-ga-script-runner.js
 * @see js/deferred-hotjar-script-runner.js
 */
function _localgov_eu_cookie_compliance_defer_tracker_scripts(array &$attachment_list): void {

  $target_head_items = [
    'hotjar_script_tag',
    'google_analytics_tracking_script',
    'google_analytics_tracking_file',
  ];
  $renderer = Drupal::service('renderer');

  $has_html_head = isset($attachment_list['#attached']['html_head']);
  if (!$has_html_head) {
    return;
  }

  $head_items_to_defer = array_filter($attachment_list['#attached']['html_head'], function ($attachment) use ($target_head_items) {
    $head_item_id = $attachment[1] ?? '';
    return is_string($head_item_id) and in_array($head_item_id, $target_head_items);
  });

  // Remove deferred head items.
  array_walk($head_items_to_defer, function ($ignore, $head_item_key) use (&$attachment_list) {
    unset($attachment_list['#attached']['html_head'][$head_item_key]);
  });

  $deferred_head_items_markup = array_reduce($head_items_to_defer, function ($carry, $attachment) use ($renderer) {
    $head_item_render_array = $attachment[0] ?? [];
    $head_item_id = $attachment[1] ?? '';
    if (empty($head_item_id) or !is_string($head_item_id)) {
      return;
    }

    // Some modules forget to declare the type of the render array!
    $head_item_render_array['#type'] = $head_item_render_array['#type'] ?? 'html_tag';
    $head_item_markup = $renderer->renderPlain($head_item_render_array);
    $carry[$head_item_id] = $head_item_markup;

    return $carry;
  }, []);

  $attachment_list['#attached']['drupalSettings']['deferred_scripts'] = json_encode($deferred_head_items_markup);
}


/**
 * Handling oembed field formatters.
 *
 * @param array $variables
 *   Field template variables (s. cookies_video_preprocess_field()).
 */
function _cookies_video_media_oembed_handler(array &$variables) {
  $formatter = $variables["element"]["#formatter"];
    /** @var \Drupal\Core\Field\FieldItemList $field_item */
    $field_item = $variables['element']['#items'];
    /** @var \Drupal\media\Entity\Media $media */
    $media = $variables['element']['#object'];
    $media_id = $media->id();
    $variables['attributes']['class'][] = "media-oembed-$media_id";
    $field_value = $field_item->getValue();
    if (isset($field_value) && !empty($field_value)) {
      $field_value = reset($field_value);
      $video_src = $field_value['value'];
    }
    
    $oembed_settings = Drupal::config('localgov_eu_cookie_compliance.settings')->get('disabled_oembeds') ?? [];
    $disabled_oembeds = _eu_cookie_compliance_explode_multiple_lines($oembed_settings);
    $blocked_domains = array();
    foreach ($disabled_oembeds as $embed) {
      // Remove 'category:' if present.
      $parts = explode('%3A', $embed);
      if (count($parts) == 1) {
        $condition = "";
        $embed = $parts[0];
      }
      else {
        $condition = $parts[0];
        $embed = end($parts);
      }
      $blocked_domains[$embed] = $condition;
    }

    foreach ($variables["items"] as &$item) {
      switch ($formatter) {
        case 'oembed':
          $item["content"]["#attributes"]['data-src'] = $video_src;

          $parsed = parse_url($video_src);
          
          if (in_array($parsed["host"], array_keys($blocked_domains))) {
            $condition = $blocked_domains[$parsed["host"]];
            $video = _cookies_video_preprocess_field_item_oembed($item);
            // render default as link element
            _cookies_video_preprocess_field_item_link($item);
          }
          
          $elements = [
            $media->id() => [
              'video' => Drupal::service('renderer')->render($video, FALSE),
              'category' => $condition,
            ]
          ];
          break;

        default:
      }

      // Attach library.
      if (!isset($item["content"]["#attached"])) {
        $item["content"]["#attached"] = ["library" => []];
      }
      if (!isset($item["content"]["#attached"]["library"])) {
        $item["content"]["#attached"]["library"] = [];
      }
      $variables["#attached"]["library"][] = 'localgov_eu_cookie_compliance/oembed_cookies';
      $variables['#attached']['drupalSettings']['ecc_cookie_oembed'] = $elements;
    }
}


/**
 * Handling field_item from oembed formatter.
 */
function _cookies_video_preprocess_field_item_oembed(&$item) {
  // Set marker class.
  if (!isset($item["content"]["#attributes"]["class"]) || !is_array($item["content"]["#attributes"]["class"])) {
    $item["content"]["#attributes"]["class"] = [];
  }
  $item["content"]["#attributes"]["class"][] = 'cookies-video';

  return $item['content'];
}

function _cookies_video_preprocess_field_item_link(&$item) {
  // Move src to href.
  $src = $item["content"]["#attributes"]["data-src"];
  $title = $item["content"]["#attributes"]["title"];
  $item["content"]["#attributes"] = [];

  $item["content"]["#type"] = "html_tag";
  $item["content"]["#tag"] = "a";
  $item["content"]["#attributes"]["href"] = $src;
  $item["content"]["#attributes"]["title"] = $title;
  $item["content"]["#attributes"]["target"] = "_blank";
  $item["content"]["#value"] = $title;
}